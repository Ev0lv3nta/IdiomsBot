
# 1. –ò–º–ø–æ—Ä—Ç—ã:
import sqlite3
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    MessageHandler,
    ContextTypes,
    filters,
)
from google import genai
from google.genai import types
import random
from datetime import datetime, time, timezone
import pytz
import logging
import json
import os
import tokens # –ò–ó–ú–ï–ù–ï–ù–û: –ò–º–ø–æ—Ä—Ç —Ñ–∞–π–ª–∞ —Å —Ç–æ–∫–µ–Ω–∞–º–∏

# 2. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO
)
logger = logging.getLogger(__name__)

# 3. –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è API –∏ –ú–æ–¥–µ–ª–∏
# !!! –í–ê–ñ–ù–û: –ö–ª—é—á–∏ —Ç–µ–ø–µ—Ä—å –±–µ—Ä—É—Ç—Å—è –∏–∑ —Ñ–∞–π–ª–∞ tokens.py !!!
GEMINI_API_KEY = tokens.GEMINI_API_KEY # –ò–ó–ú–ï–ù–ï–ù–û: –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–ª—é—á–∞ –∏–∑ —Ñ–∞–π–ª–∞
TELEGRAM_TOKEN = tokens.TELEGRAM_TOKEN # –ò–ó–ú–ï–ù–ï–ù–û: –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –∏–∑ —Ñ–∞–π–ª–∞

# 4. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Gemini API –∫–ª–∏–µ–Ω—Ç–∞
client = None
MODEL = None
try:
    client = genai.Client(api_key=GEMINI_API_KEY)
    # –ò–ó–ú–ï–ù–ï–ù–û: –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ–¥–µ–ª—å gemini-2.0-flash
    MODEL = "gemini-2.0-flash"
    logger.info(f"Gemini API –∫–ª–∏–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å –º–æ–¥–µ–ª—å—é {MODEL}.")
except Exception as e:
    logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Gemini API: {e}", exc_info=True)
    # –ï—Å–ª–∏ –∫–ª—é—á –Ω–µ–≤–∞–ª–∏–¥–µ–Ω –∏–ª–∏ –¥—Ä—É–≥–∞—è –ø—Ä–æ–±–ª–µ–º–∞, Gemini –±—É–¥–µ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω

# 5. –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ / –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
DB_NAME = "bot.db"
IDIOMS_JSON_FILE = "idioms.json"
THEMES = [] # –ë—É–¥—É—Ç –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ JSON

# 6. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö SQLite (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
conn = None
cursor = None
try:
    conn = sqlite3.connect(DB_NAME, check_same_thread=False)
    conn.row_factory = sqlite3.Row
    cursor = conn.cursor()
    logger.info(f"–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ SQLite ({DB_NAME}) —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.")
    # –°–æ–∑–¥–∞–Ω–∏–µ/–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ö–µ–º—ã —Ç–∞–±–ª–∏—Ü (idioms, users, user_logs)
    # –¢–∞–±–ª–∏—Ü–∞ 'idioms'
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS idioms (
            id INTEGER PRIMARY KEY AUTOINCREMENT, theme TEXT, idiom TEXT UNIQUE NOT NULL,
            pinyin TEXT, translation TEXT, meaning TEXT, example TEXT
        )""")
    try: cursor.execute("CREATE INDEX IF NOT EXISTS idx_idiom ON idioms(idiom)")
    except sqlite3.OperationalError: pass
    logger.info("–¢–∞–±–ª–∏—Ü–∞ 'idioms' –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞/—Å–æ–∑–¥–∞–Ω–∞.")
    # –¢–∞–±–ª–∏—Ü–∞ 'users'
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS users (
            chat_id INTEGER PRIMARY KEY, username TEXT, first_name TEXT, last_name TEXT,
            daily_time TEXT DEFAULT '09:00', dictionary TEXT DEFAULT '',
            practice_correct INTEGER DEFAULT 0, practice_total INTEGER DEFAULT 0
        )""")
    logger.info("–¢–∞–±–ª–∏—Ü–∞ 'users' –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞/—Å–æ–∑–¥–∞–Ω–∞.")
    user_columns = [("username", "TEXT"), ("first_name", "TEXT"), ("last_name", "TEXT"), ("practice_correct", "INTEGER DEFAULT 0"), ("practice_total", "INTEGER DEFAULT 0"), ("daily_time", "TEXT DEFAULT '09:00'"), ("dictionary", "TEXT DEFAULT ''")]
    for col_name, col_type in user_columns:
        try: cursor.execute(f"ALTER TABLE users ADD COLUMN {col_name} {col_type}")
        except sqlite3.OperationalError: pass
    # –¢–∞–±–ª–∏—Ü–∞ 'user_logs'
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS user_logs (
            log_id INTEGER PRIMARY KEY AUTOINCREMENT, chat_id INTEGER,
            timestamp DATETIME DEFAULT CURRENT_TIMESTAMP, action_type TEXT, details TEXT,
            FOREIGN KEY (chat_id) REFERENCES users (chat_id)
        )""")
    logger.info("–¢–∞–±–ª–∏—Ü–∞ 'user_logs' –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞/—Å–æ–∑–¥–∞–Ω–∞.")
    conn.commit()
    logger.info("–ò–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ö–µ–º—ã –ë–î —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.")
except sqlite3.Error as e:
    logger.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î: {e}", exc_info=True)
    conn = cursor = None
except Exception as e:
    logger.critical(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î: {e}", exc_info=True)
    conn = cursor = None

# 7. –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏–¥–∏–æ–º –∏–∑ JSON (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
def load_idioms_from_json(db_cursor: sqlite3.Cursor, db_conn: sqlite3.Connection):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –∏–¥–∏–æ–º—ã –≤ –ë–î –∏–∑ —Ñ–∞–π–ª–∞ IDIOMS_JSON_FILE."""
    if not os.path.exists(IDIOMS_JSON_FILE):
        logger.warning(f"–§–∞–π–ª {IDIOMS_JSON_FILE} –Ω–µ –Ω–∞–π–¥–µ–Ω. –ó–∞–≥—Ä—É–∑–∫–∞ –∏–¥–∏–æ–º –ø—Ä–æ–ø—É—â–µ–Ω–∞.")
        return 0
    try:
        with open(IDIOMS_JSON_FILE, 'r', encoding='utf-8') as f: data = json.load(f)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏/–¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–∏ {IDIOMS_JSON_FILE}: {e}", exc_info=True)
        return 0

    loaded_count, replaced_count, skipped_count = 0, 0, 0
    global THEMES
    new_themes = set()

    if not isinstance(data, dict):
          logger.error(f"–û—à–∏–±–∫–∞: –û–∂–∏–¥–∞–µ–º–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ JSON - —Å–ª–æ–≤–∞—Ä—å —Ç–µ–º (dict), –ø–æ–ª—É—á–µ–Ω {type(data)}")
          return 0

    for theme, idioms_list in data.items():
        new_themes.add(theme)
        if not isinstance(idioms_list, list):
            logger.warning(f"–û–∂–∏–¥–∞–ª—Å—è —Å–ø–∏—Å–æ–∫ –∏–¥–∏–æ–º –¥–ª—è —Ç–µ–º—ã '{theme}', –ø–æ–ª—É—á–µ–Ω {type(idioms_list)}. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.")
            continue
        for idiom_data in idioms_list:
            if not isinstance(idiom_data, dict) or not idiom_data.get("idiom"):
                logger.warning(f"–ü—Ä–æ–ø—É—â–µ–Ω–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –∑–∞–ø–∏—Å—å –≤ —Ç–µ–º–µ '{theme}': {idiom_data}")
                skipped_count += 1
                continue
            try:
                db_cursor.execute("SELECT 1 FROM idioms WHERE idiom = ?", (idiom_data["idiom"],))
                exists = db_cursor.fetchone()
                db_cursor.execute(
                    """INSERT OR REPLACE INTO idioms (theme, idiom, pinyin, translation, meaning, example) VALUES (?, ?, ?, ?, ?, ?)""",
                    (theme, idiom_data.get("idiom"), idiom_data.get("pinyin"), idiom_data.get("translation"), idiom_data.get("meaning"), idiom_data.get("example"))
                )
                if exists: replaced_count += 1
                else: loaded_count += 1
            except sqlite3.Error as e:
                logger.error(f"–û—à–∏–±–∫–∞ SQLite –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ/–∑–∞–º–µ–Ω–µ –∏–¥–∏–æ–º—ã '{idiom_data.get('idiom')}': {e}")
                skipped_count += 1
            except Exception as e:
                  logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–¥–∏–æ–º—ã {idiom_data}: {e}")
                  skipped_count += 1

    if loaded_count > 0 or replaced_count > 0 or skipped_count > 0:
        try:
            db_conn.commit()
            logger.info(f"–ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑ {IDIOMS_JSON_FILE}: –¥–æ–±–∞–≤–ª–µ–Ω–æ {loaded_count}, –∑–∞–º–µ–Ω–µ–Ω–æ {replaced_count}, –ø—Ä–æ–ø—É—â–µ–Ω–æ {skipped_count}.")
        except sqlite3.Error as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–º–º–∏—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–¥–∏–æ–º: {e}")
            return 0
    else: logger.info(f"–ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑ {IDIOMS_JSON_FILE}: –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏/–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.")

    THEMES = sorted(list(new_themes))
    logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω—ã —Ç–µ–º—ã –∏–∑ JSON: {THEMES}")
    return loaded_count + replaced_count

# --- –§—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞ ---

# 8. –§—É–Ω–∫—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
async def log_user_action(chat_id: int, action_type: str, details: dict = None):
    if not cursor or not conn: return
    details_json = json.dumps(details, ensure_ascii=False, sort_keys=True) if details else None
    try:
        cursor.execute("INSERT INTO user_logs (chat_id, action_type, details) VALUES (?, ?, ?)", (chat_id, action_type, details_json))
        conn.commit()
    except sqlite3.Error as e: logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –ª–æ–≥–∞ –¥–ª—è {chat_id} (Action: {action_type}): {e}")

# 9. –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
async def update_user_info(chat_id: int, user: 'telegram.User'):
    if not cursor or not conn or not user: return
    try:
        cursor.execute(
            """INSERT INTO users (chat_id, username, first_name, last_name) VALUES (?, ?, ?, ?)
               ON CONFLICT(chat_id) DO UPDATE SET username=excluded.username, first_name=excluded.first_name, last_name=excluded.last_name""",
            (chat_id, user.username, user.first_name, user.last_name)
        )
        conn.commit()
    except sqlite3.Error as e: logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è/–≤—Å—Ç–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}: {e}")

# 10. –§—É–Ω–∫—Ü–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é (`show_main_menu`) (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
async def show_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    chat_id = update.effective_chat.id if update.effective_chat else None
    if chat_id and user:
        await update_user_info(chat_id, user)
        await log_user_action(chat_id, "command_start")
    keyboard = [
        [InlineKeyboardButton("üìö –ò–¥–∏–æ–º–∞ –¥–Ω—è", callback_data="idiom")],
        [InlineKeyboardButton("üè∑ –¢–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –∏–¥–∏–æ–º—ã", callback_data="theme")],
        [InlineKeyboardButton("üéì –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞", callback_data="practice")],
        [InlineKeyboardButton("üìñ –õ–∏—á–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å", callback_data="dictionary")],
        [InlineKeyboardButton("‚ùì –°–≤–æ–±–æ–¥–Ω—ã–π —Ä–µ–∂–∏–º", callback_data="free_mode")],
        [InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings")],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    text = "üá®üá≥ *–ë–æ—Ç –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è –∫–∏—Ç–∞–π—Å–∫–∏—Ö –∏–¥–∏–æ–º*\n–í—ã–±–µ—Ä–∏ —Ä–µ–∂–∏–º:"
    message_to_edit = update.callback_query.message if update.callback_query else None
    current_message = update.message
    if message_to_edit:
        try: await message_to_edit.edit_text(text, reply_markup=reply_markup, parse_mode="Markdown")
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ show_main_menu (callback): {e}")
            if chat_id: await context.bot.send_message(chat_id=chat_id, text=text, reply_markup=reply_markup, parse_mode="Markdown")
    elif current_message: await current_message.reply_text(text, reply_markup=reply_markup, parse_mode="Markdown")
    elif chat_id: await context.bot.send_message(chat_id=chat_id, text=text, reply_markup=reply_markup, parse_mode="Markdown")

# 11. –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ Inline-–∫–Ω–æ–ø–∫–∏ (`button_handler`)
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    if not query or not query.message or not query.data:
        if query: await query.answer()
        return
    await query.answer()
    chat_id = query.message.chat_id
    data = query.data
    message = query.message
    log_details = {"callback_data": data}
    await log_user_action(chat_id, "button_press", log_details)

    # –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏–π –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞
    keys_to_pop = ['awaiting_idiom', 'awaiting_time', 'practice_type', 'current_practice_idiom_data']
    for key in keys_to_pop: context.user_data.pop(key, None)

    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ä–µ–∂–∏–º—ã –º—É–ª—å—Ç–∏-–≤–æ–ø—Ä–æ—Å–æ–≤, –µ—Å–ª–∏ –Ω–∞–∂–∞—Ç–∞ –ù–ï –∏—Ö –∫–Ω–æ–ø–∫–∞ –≤—ã—Ö–æ–¥–∞
    if data != 'exit_asking_mode':
        context.user_data.pop('asking_about_idiom', None)
        # context.user_data.pop('asking_mode_history', None) # –û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ (–ø–æ–∫–∞ –Ω–µ –¥–µ–ª–∞–µ–º)
    if data != 'exit_free_mode': # –ò–ó–ú–ï–ù–ï–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–Ω–æ–ø–∫—É –≤—ã—Ö–æ–¥–∞ –∏–∑ –Ω–æ–≤–æ–≥–æ —Ä–µ–∂–∏–º–∞
        context.user_data.pop('in_free_mode_conversation', None)
        context.user_data.pop('free_mode_history', None) # –ò–ó–ú–ï–ù–ï–ù–û: –û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –ù–ï —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É –≤—ã—Ö–æ–¥–∞

    # –¢–∞–∫–∂–µ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ä—ã–π —Ñ–ª–∞–≥ –û–ñ–ò–î–ê–ù–ò–Ø –≤–æ–ø—Ä–æ—Å–∞ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞ (–Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π)
    context.user_data.pop('awaiting_free_mode', None)

    try:
        # –ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è
        if data == "idiom": await idiom(message, context)
        elif data == "theme": await theme(message, context)
        elif data == "practice": await practice(message, context)
        elif data == "dictionary": await dictionary(message, context)
        elif data == "free_mode": await start_free_mode_conversation(message, context)
        elif data == "settings": await settings(message, context)
        elif data.startswith("theme_"): await theme_selected(message, context, data.split("_", 1)[1])
        elif data.startswith("practice_"): await practice_selected(message, context, data.split("_", 1)[1])
        elif data == "add_idiom": await add_idiom_prompt(message, context)
        elif data.startswith("confirm_add_"): await confirm_add_idiom(message, context, data.split("confirm_add_", 1)[1])
        elif data == "view_dictionary": await view_dictionary(message, context)
        elif data == "repeat_idioms": await repeat_idioms(message, context)
        elif data == "set_time": await set_time_prompt(message, context)
        elif data.startswith("question_"): await start_asking_mode(message, context, data.split("question_", 1)[1])
        elif data == 'exit_asking_mode':
              context.user_data.pop('asking_about_idiom', None)
              # context.user_data.pop('asking_mode_history', None) # –û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
              await dictionary(message, context) # –í–æ–∑–≤—Ä–∞—Ç –≤ —Å–ª–æ–≤–∞—Ä—å (–∏–ª–∏ –∫—É–¥–∞ –ª–æ–≥–∏—á–Ω–µ–µ)
        elif data == 'exit_free_mode': # –ù–û–í–´–ô –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
              context.user_data.pop('in_free_mode_conversation', None)
              context.user_data.pop('free_mode_history', None) # –ò–ó–ú–ï–ù–ï–ù–û: –û—á–∏—â–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ
              await log_user_action(chat_id, "free_mode_exit_button")
              await show_main_menu(update, context) # –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        elif data.startswith("delete_"): await confirm_delete_idiom(message, context, data.split("delete_", 1)[1])
        elif data.startswith("confirm_delete_"): await delete_idiom(message, context, data.split("confirm_delete_", 1)[1])
        elif data == "back": await show_main_menu(update, context)
        elif data == "back_to_dictionary": await dictionary(message, context)
        else:
            logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π callback_data: {data} –æ—Ç {chat_id}")
            await message.edit_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.", reply_markup=back_button())
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ button_handler (data: {data}, chat: {chat_id}): {e}", exc_info=True)
        try: await message.edit_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞.", reply_markup=back_button())
        except Exception as edit_e: logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ: {edit_e}")

# 12. –§—É–Ω–∫—Ü–∏–∏ "–ò–¥–∏–æ–º–∞ –¥–Ω—è", "–¢–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –∏–¥–∏–æ–º—ã", "–ü—Ä–∞–∫—Ç–∏–∫–∞", "–°–ª–æ–≤–∞—Ä—å" (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –ª–æ–≥–∏–∫–µ)
async def idiom(message, context: ContextTypes.DEFAULT_TYPE):
    if not cursor: await message.edit_text("–û—à–∏–±–∫–∞: –ë–î –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.", reply_markup=back_button()); return
    try: cursor.execute("SELECT * FROM idioms ORDER BY RANDOM() LIMIT 1"); result = cursor.fetchone()
    except sqlite3.Error as e: logger.error(f"–û—à–∏–±–∫–∞ SQLite –≤ idiom: {e}"); await message.edit_text("–û—à–∏–±–∫–∞.", reply_markup=back_button()); return
    if result:
        idiom_text = result['idiom']
        msg_text = format_idiom_details(result)
        keyboard = [[InlineKeyboardButton("‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å", callback_data=f"question_{idiom_text}")], [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤ —Å–ª–æ–≤–∞—Ä—å", callback_data=f"confirm_add_{idiom_text}")], [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back")]]
        await message.edit_text(msg_text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode="Markdown")
    else: await message.edit_text("‚ùå –ë–∞–∑–∞ –∏–¥–∏–æ–º –ø—É—Å—Ç–∞!", reply_markup=back_button())

async def theme(message, context: ContextTypes.DEFAULT_TYPE):
    if not THEMES: await message.edit_text("–û—à–∏–±–∫–∞: –¢–µ–º—ã –∏–¥–∏–æ–º –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã.", reply_markup=back_button()); return
    keyboard = [[InlineKeyboardButton(theme.capitalize(), callback_data=f"theme_{theme}")] for theme in THEMES]
    keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back")])
    await message.edit_text("üè∑ –í—ã–±–µ—Ä–∏ —Ç–µ–º—É:", reply_markup=InlineKeyboardMarkup(keyboard))

async def theme_selected(message, context: ContextTypes.DEFAULT_TYPE, theme_name: str):
    if not cursor: await message.edit_text("–û—à–∏–±–∫–∞: –ë–î –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.", reply_markup=back_button()); return
    try: cursor.execute("SELECT * FROM idioms WHERE theme = ? ORDER BY RANDOM() LIMIT 1", (theme_name,)); result = cursor.fetchone()
    except sqlite3.Error as e: logger.error(f"–û—à–∏–±–∫–∞ SQLite –≤ theme_selected (—Ç–µ–º–∞: {theme_name}): {e}"); await message.edit_text("–û—à–∏–±–∫–∞.", reply_markup=back_button()); return
    if result:
        idiom_text = result['idiom']
        msg_text = f"üè∑ *–ò–¥–∏–æ–º–∞ –ø–æ —Ç–µ–º–µ '{theme_name.capitalize()}'*:\n\n" + format_idiom_details(result)
        keyboard = [[InlineKeyboardButton(f"‚ûï '{idiom_text}' –≤ —Å–ª–æ–≤–∞—Ä—å", callback_data=f"confirm_add_{idiom_text}")], [InlineKeyboardButton(f"‚ùì –í–æ–ø—Ä–æ—Å –ø—Ä–æ '{idiom_text}'", callback_data=f"question_{idiom_text}")], [InlineKeyboardButton("üîÑ –î—Ä—É–≥–∞—è –∏–¥–∏–æ–º–∞ –ø–æ —Ç–µ–º–µ", callback_data=f"theme_{theme_name}")], [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Ç–µ–º–∞–º", callback_data="theme")], [InlineKeyboardButton("‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back")]]
        await message.edit_text(msg_text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode="Markdown")
    else: await message.edit_text(f"‚ùå –ò–¥–∏–æ–º –ø–æ —Ç–µ–º–µ '{theme_name.capitalize()}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!", reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Ç–µ–º–∞–º", callback_data="theme")]]))

async def practice(message, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [[InlineKeyboardButton("–ü–µ—Ä–µ–≤–æ–¥", callback_data="practice_translate")], [InlineKeyboardButton("–ü—Ä–∏–º–µ—Ä –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è", callback_data="practice_example")], [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back")]]
    await message.edit_text("üéì –í—ã–±–µ—Ä–∏ —Ç–∏–ø –∑–∞–¥–∞–Ω–∏—è:", reply_markup=InlineKeyboardMarkup(keyboard))

async def practice_selected(message, context: ContextTypes.DEFAULT_TYPE, practice_type: str):
    if not cursor: await message.edit_text("–û—à–∏–±–∫–∞: –ë–î –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.", reply_markup=back_button()); return
    try: cursor.execute("SELECT * FROM idioms ORDER BY RANDOM() LIMIT 1"); result = cursor.fetchone()
    except sqlite3.Error as e: logger.error(f"–û—à–∏–±–∫–∞ SQLite –≤ practice_selected: {e}"); await message.edit_text("–û—à–∏–±–∫–∞.", reply_markup=back_button()); return
    if result:
        idiom_data = dict(result)
        context.user_data["current_practice_idiom_data"] = idiom_data
        context.user_data["practice_type"] = practice_type
        prompt_text = f"üéì *–ü–µ—Ä–µ–≤–µ–¥–∏ –∏–¥–∏–æ–º—É*: {idiom_data['idiom']} ({idiom_data['pinyin']})" if practice_type == "translate" else f"üéì *–ù–∞–ø–∏—à–∏ –ø—Ä–∏–º–µ—Ä –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Å –∏–¥–∏–æ–º–æ–π*: {idiom_data['idiom']}"
        await message.edit_text(prompt_text, reply_markup=back_button(), parse_mode="Markdown")
    else: await message.edit_text("‚ùå –ë–∞–∑–∞ –∏–¥–∏–æ–º –ø—É—Å—Ç–∞!", reply_markup=back_button())

async def dictionary(message, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [[InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∏–¥–∏–æ–º—É", callback_data="add_idiom")], [InlineKeyboardButton("üìã –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ª–æ–≤–∞—Ä—å", callback_data="view_dictionary")], [InlineKeyboardButton("üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –∏–¥–∏–æ–º—ã", callback_data="repeat_idioms")], [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back")]]
    await message.edit_text("üìñ –õ–∏—á–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å:", reply_markup=InlineKeyboardMarkup(keyboard))

async def add_idiom_prompt(message, context: ContextTypes.DEFAULT_TYPE):
    await message.edit_text("‚ûï –ù–∞–ø–∏—à–∏ –∏–¥–∏–æ–º—É –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:", reply_markup=back_to_dictionary_button())
    context.user_data["awaiting_idiom"] = True

async def confirm_add_idiom(message, context: ContextTypes.DEFAULT_TYPE, idiom_str: str):
    chat_id = message.chat_id; idiom_str = idiom_str.strip()
    if not idiom_str: await message.edit_text("‚ùå –í—ã –Ω–µ –≤–≤–µ–ª–∏ –∏–¥–∏–æ–º—É.", reply_markup=back_to_dictionary_button()); return
    if not cursor or not conn: await message.edit_text("–û—à–∏–±–∫–∞: –ë–î –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.", reply_markup=back_to_dictionary_button()); return
    try:
        cursor.execute("SELECT 1 FROM idioms WHERE idiom = ?", (idiom_str,)); exists_in_main_db = cursor.fetchone()
        if not exists_in_main_db: await message.edit_text(f"ü§î –ò–¥–∏–æ–º–∞ '{idiom_str}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ.", reply_markup=back_to_dictionary_button()); return
        cursor.execute("SELECT dictionary FROM users WHERE chat_id = ?", (chat_id,)); user_data = cursor.fetchone()
        user_dictionary = user_data['dictionary'].split(';') if user_data and user_data['dictionary'] else []
        user_dictionary = [item for item in user_dictionary if item]
        if idiom_str not in user_dictionary:
            user_dictionary.append(idiom_str); new_dictionary_str = ";".join(user_dictionary)
            cursor.execute("UPDATE users SET dictionary = ? WHERE chat_id = ?", (new_dictionary_str, chat_id)); conn.commit()
            await log_user_action(chat_id, "dictionary_add", {"idiom": idiom_str})
            await message.edit_text(f"‚úÖ –ò–¥–∏–æ–º–∞ '{idiom_str}' –¥–æ–±–∞–≤–ª–µ–Ω–∞!", reply_markup=back_to_dictionary_button())
        else: await message.edit_text(f"‚ÑπÔ∏è –ò–¥–∏–æ–º–∞ '{idiom_str}' —É–∂–µ –≤ —Å–ª–æ–≤–∞—Ä–µ!", reply_markup=back_to_dictionary_button())
    except sqlite3.Error as e: logger.error(f"–û—à–∏–±–∫–∞ SQLite –≤ confirm_add_idiom –¥–ª—è {chat_id}: {e}"); await message.edit_text("–û—à–∏–±–∫–∞.", reply_markup=back_to_dictionary_button())

async def view_dictionary(message, context: ContextTypes.DEFAULT_TYPE):
    chat_id = message.chat_id
    if not cursor: await message.edit_text("–û—à–∏–±–∫–∞: –ë–î –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.", reply_markup=back_to_dictionary_button()); return
    try: cursor.execute("SELECT dictionary FROM users WHERE chat_id = ?", (chat_id,)); user_data = cursor.fetchone()
    except sqlite3.Error as e: logger.error(f"–û—à–∏–±–∫–∞ SQLite –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ª–æ–≤–∞—Ä—è {chat_id}: {e}"); await message.edit_text("–û—à–∏–±–∫–∞.", reply_markup=back_to_dictionary_button()); return
    user_dictionary = user_data['dictionary'].split(';') if user_data and user_data['dictionary'] else []
    user_dictionary = [item for item in user_dictionary if item]
    if user_dictionary:
        msg_text = "üìñ *–¢–≤–æ–π —Å–ª–æ–≤–∞—Ä—å*:\n\n"; keyboard_buttons = []; idioms_details = {}
        try:
            placeholders = ','.join('?' * len(user_dictionary))
            cursor.execute(f"SELECT idiom, translation FROM idioms WHERE idiom IN ({placeholders})", user_dictionary); rows = cursor.fetchall()
            for row in rows: idioms_details[row['idiom']] = row['translation']
        except sqlite3.Error as e: logger.error(f"–û—à–∏–±–∫–∞ SQLite –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –¥–ª—è —Å–ª–æ–≤–∞—Ä—è {chat_id}: {e}")
        for item in user_dictionary:
            translation = idioms_details.get(item, "?")
            msg_text += f"- {item} ({translation})\n"
            keyboard_buttons.append([InlineKeyboardButton(f"‚ùì –í–æ–ø—Ä–æ—Å –ø—Ä–æ '{item}'", callback_data=f"question_{item}"), InlineKeyboardButton(f"üóë –£–¥–∞–ª–∏—Ç—å '{item}'", callback_data=f"delete_{item}")])
        keyboard_buttons.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ —Å–ª–æ–≤–∞—Ä—å", callback_data="back_to_dictionary")])
        await message.edit_text(msg_text, reply_markup=InlineKeyboardMarkup(keyboard_buttons), parse_mode="Markdown")
    else: await message.edit_text("üìñ –°–ª–æ–≤–∞—Ä—å –ø—É—Å—Ç!", reply_markup=back_to_dictionary_button())

async def repeat_idioms(message, context: ContextTypes.DEFAULT_TYPE):
    chat_id = message.chat_id
    if not cursor: await message.edit_text("–û—à–∏–±–∫–∞: –ë–î –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.", reply_markup=back_to_dictionary_button()); return
    try: cursor.execute("SELECT dictionary FROM users WHERE chat_id = ?", (chat_id,)); user_data = cursor.fetchone()
    except sqlite3.Error as e: logger.error(f"–û—à–∏–±–∫–∞ SQLite –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ª–æ–≤–∞—Ä—è –¥–ª—è –ø–æ–≤—Ç–æ—Ä–∞ ({chat_id}): {e}"); await message.edit_text("–û—à–∏–±–∫–∞.", reply_markup=back_to_dictionary_button()); return
    user_dictionary = user_data['dictionary'].split(';') if user_data and user_data['dictionary'] else []
    user_dictionary = [item for item in user_dictionary if item]
    if user_dictionary:
        idiom_text = random.choice(user_dictionary)
        try: cursor.execute("SELECT * FROM idioms WHERE idiom = ?", (idiom_text,)); idiom_details = cursor.fetchone()
        except sqlite3.Error as e: logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –¥–ª—è –ø–æ–≤—Ç–æ—Ä–∞ {idiom_text}: {e}"); idiom_details = None
        msg_text = "üîÑ *–ü–æ–≤—Ç–æ—Ä—è–µ–º –∏–¥–∏–æ–º—É*:\n\n" + format_idiom_details(idiom_details) if idiom_details else f"üîÑ *–ü–æ–≤—Ç–æ—Ä—è–µ–º*:\n{idiom_text}\n_(–î–µ—Ç–∞–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã)_"
        keyboard = [[InlineKeyboardButton("‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å", callback_data=f"question_{idiom_text}")], [InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_{idiom_text}")], [InlineKeyboardButton("‚û°Ô∏è –°–ª–µ–¥—É—é—â–∞—è", callback_data="repeat_idioms")], [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ —Å–ª–æ–≤–∞—Ä—å", callback_data="back_to_dictionary")]]
        await message.edit_text(msg_text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode="Markdown")
    else: await message.edit_text("üìñ –°–ª–æ–≤–∞—Ä—å –ø—É—Å—Ç!", reply_markup=back_to_dictionary_button())

# –†–µ–∂–∏–º –º—É–ª—å—Ç–∏-–≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ –∏–¥–∏–æ–º–µ (start_asking_mode) - –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
# –ü—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏, –º–æ–∂–Ω–æ —Å—é–¥–∞ —Ç–æ–∂–µ –¥–æ–±–∞–≤–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏, –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ —Å–≤–æ–±–æ–¥–Ω–æ–º—É —Ä–µ–∂–∏–º—É
async def start_asking_mode(message, context: ContextTypes.DEFAULT_TYPE, idiom: str):
    context.user_data['asking_about_idiom'] = idiom
    # context.user_data['asking_mode_history'] = [] # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏—Å—Ç–æ—Ä–∏–∏, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    logger.info(f"Chat {message.chat_id} entered asking mode for idiom: {idiom}")
    exit_button = exit_asking_button()
    await message.edit_text(
        f"‚ùì –í—ã –≤–æ—à–ª–∏ –≤ —Ä–µ–∂–∏–º –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ –∏–¥–∏–æ–º–µ: *{idiom}*.\n"
        f"–ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å. –ß—Ç–æ–±—ã –≤—ã–π—Ç–∏, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–≤—ã–π—Ç–∏'.",
        reply_markup=exit_button, parse_mode="Markdown"
    )

# –§—É–Ω–∫—Ü–∏–∏ —É–¥–∞–ª–µ–Ω–∏—è –∏–¥–∏–æ–º—ã (confirm_delete_idiom, delete_idiom) - –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –ª–æ–≥–∏–∫–µ
async def confirm_delete_idiom(message, context: ContextTypes.DEFAULT_TYPE, idiom: str):
    keyboard = [[InlineKeyboardButton("‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"confirm_delete_{idiom}")], [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="back_to_dictionary")]]
    await message.edit_text(f"üóë –£–¥–∞–ª–∏—Ç—å –∏–¥–∏–æ–º—É '{idiom}' –∏–∑ —Å–ª–æ–≤–∞—Ä—è?", reply_markup=InlineKeyboardMarkup(keyboard))

async def delete_idiom(message, context: ContextTypes.DEFAULT_TYPE, idiom: str):
    chat_id = message.chat_id
    if not cursor or not conn: await message.edit_text("–û—à–∏–±–∫–∞: –ë–î –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.", reply_markup=back_to_dictionary_button()); return
    try:
        cursor.execute("SELECT dictionary FROM users WHERE chat_id = ?", (chat_id,)); user_data = cursor.fetchone()
        user_dictionary = user_data['dictionary'].split(';') if user_data and user_data['dictionary'] else []
        user_dictionary = [item for item in user_dictionary if item]
        if idiom in user_dictionary:
            user_dictionary.remove(idiom); new_dictionary_str = ";".join(user_dictionary)
            cursor.execute("UPDATE users SET dictionary = ? WHERE chat_id = ?", (new_dictionary_str, chat_id)); conn.commit()
            await log_user_action(chat_id, "dictionary_delete", {"idiom": idiom})
            await message.edit_text(f"‚úÖ –ò–¥–∏–æ–º–∞ '{idiom}' —É–¥–∞–ª–µ–Ω–∞!", reply_markup=back_to_dictionary_button())
        else: await message.edit_text(f"‚ùå –ò–¥–∏–æ–º–∞ '{idiom}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Å–ª–æ–≤–∞—Ä–µ!", reply_markup=back_to_dictionary_button())
    except sqlite3.Error as e: logger.error(f"–û—à–∏–±–∫–∞ SQLite –≤ delete_idiom –¥–ª—è {chat_id}: {e}"); await message.edit_text("–û—à–∏–±–∫–∞.", reply_markup=back_to_dictionary_button())

# 13. –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–µ–∂–∏–º–∞ "–°–≤–æ–±–æ–¥–Ω—ã–π —Ä–µ–∂–∏–º" - –ò–ó–ú–ï–ù–ï–ù–û: –î–æ–±–∞–≤–ª–µ–Ω–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏—Å—Ç–æ—Ä–∏–∏
async def start_free_mode_conversation(message, context: ContextTypes.DEFAULT_TYPE):
    """–ò–Ω–∏—Ü–∏–∏—Ä—É–µ—Ç —Ä–µ–∂–∏–º '—Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞'."""
    chat_id = message.chat_id
    context.user_data['in_free_mode_conversation'] = True # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ —Ä–µ–∂–∏–º–∞
    context.user_data['free_mode_history'] = [] # –ò–ó–ú–ï–ù–ï–ù–û: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—É—Å—Ç—É—é –∏—Å—Ç–æ—Ä–∏—é
    logger.info(f"Chat {chat_id} entered free mode conversation.")
    await log_user_action(chat_id, "free_mode_start")

    # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –≤ –Ω–∞—á–∞–ª–æ –∏—Å—Ç–æ—Ä–∏–∏, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    # initial_system_prompt = "–¢—ã –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ø–æ –∫–∏—Ç–∞–π—Å–∫–æ–º—É —è–∑—ã–∫—É. –û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ —Å—É—â–µ—Å—Ç–≤—É –Ω–∞ —Ä—É—Å—Å–∫–æ–º."
    # context.user_data['free_mode_history'].append({'role': 'system', 'parts': [{'text': initial_system_prompt}]}) # –§–æ—Ä–º–∞—Ç –º–æ–∂–µ—Ç –æ—Ç–ª–∏—á–∞—Ç—å—Å—è

    await message.edit_text(
        "‚ùì –í—ã –≤–æ—à–ª–∏ –≤ —Å–≤–æ–±–æ–¥–Ω—ã–π —Ä–µ–∂–∏–º.\n"
        "–ó–∞–¥–∞–≤–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å—ã –æ –∫–∏—Ç–∞–π—Å–∫–æ–º —è–∑—ã–∫–µ (–∏–¥–∏–æ–º—ã, —Å–ª–æ–≤–∞, –≥—Ä–∞–º–º–∞—Ç–∏–∫–∞...). "
        "–ß—Ç–æ–±—ã –≤—ã–π—Ç–∏, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–≤—ã–π—Ç–∏'.",
        reply_markup=exit_free_mode_button()
    )

# 14. –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–µ–∂–∏–º–∞ "–ù–∞—Å—Ç—Ä–æ–π–∫–∏" (`settings`, `set_time_prompt`) - –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –ª–æ–≥–∏–∫–µ
async def settings(message, context: ContextTypes.DEFAULT_TYPE):
    chat_id = message.chat_id; current_time = "09:00"; correct = 0; total = 0; accuracy = 0.0
    if cursor:
        try:
            cursor.execute("SELECT daily_time, practice_correct, practice_total FROM users WHERE chat_id = ?", (chat_id,)); result = cursor.fetchone()
            if result:
                current_time = result['daily_time'] or "09:00"; correct = result['practice_correct'] or 0; total = result['practice_total'] or 0
                if total > 0: accuracy = (correct / total * 100)
        except sqlite3.Error as e: logger.error(f"–û—à–∏–±–∫–∞ SQLite –≤ settings –¥–ª—è {chat_id}: {e}")
    keyboard = [[InlineKeyboardButton(f"‚è∞ –ó–∞–¥–∞—Ç—å –≤—Ä–µ–º—è —Ä–∞—Å—Å—ã–ª–∫–∏ ({current_time} UTC)", callback_data="set_time")], [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back")]]
    msg_text = f"‚öôÔ∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∏*\n‚è∞ –í—Ä–µ–º—è —Ä–∞—Å—Å—ã–ª–∫–∏: {current_time} (UTC)\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–∞–∫—Ç–∏–∫–∏: {correct}/{total} ({accuracy:.1f}%)"
    await message.edit_text(msg_text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode="Markdown")

async def set_time_prompt(message, context: ContextTypes.DEFAULT_TYPE):
    await message.edit_text("‚è∞ –£–∫–∞–∂–∏ –≤—Ä–µ–º—è –¥–ª—è '–ò–¥–∏–æ–º—ã –¥–Ω—è' –≤ –ß–ß:–ú–ú (UTC):", reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings")]]))
    context.user_data["awaiting_time"] = True

# 15. –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (`handle_message`) - –ò–ó–ú–ï–ù–ï–ù–û: –õ–æ–≥–∏–∫–∞ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞ —Å –∏—Å—Ç–æ—Ä–∏–µ–π
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message or not update.message.text: return

    chat_id = update.message.chat_id
    text = update.message.text.strip()
    user_data = context.user_data
    user = update.effective_user
    if user: await update_user_info(chat_id, user)

    exit_commands = ['–≤—ã–π—Ç–∏', '—Ö–≤–∞—Ç–∏—Ç', 'stop', 'exit', '/stop', '/–≤—ã—Ö–æ–¥'] # –î–æ–±–∞–≤–∏–ª /–≤—ã—Ö–æ–¥

    # 0. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤—ã—Ö–æ–¥ –∏–∑ —Ä–µ–∂–∏–º–∞ –º—É–ª—å—Ç–∏-–≤–æ–ø—Ä–æ—Å–∞ –ø–æ –∏–¥–∏–æ–º–µ
    current_asking_idiom = user_data.get('asking_about_idiom')
    if current_asking_idiom and text.lower() in exit_commands:
        user_data.pop('asking_about_idiom', None)
        # user_data.pop('asking_mode_history', None) # –û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏, –µ—Å–ª–∏ –±—ã–ª–∞
        logger.info(f"Chat {chat_id} exited asking mode for idiom: {current_asking_idiom} by command")
        await log_user_action(chat_id, "asking_mode_exit_cmd", {"idiom": current_asking_idiom})
        await update.message.reply_text("–í—ã –≤—ã—à–ª–∏ –∏–∑ —Ä–µ–∂–∏–º–∞ –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ –∏–¥–∏–æ–º–µ.", reply_markup=back_to_dictionary_button())
        return

    # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤—ã—Ö–æ–¥ –∏–∑ —Ä–µ–∂–∏–º–∞ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞
    in_free_mode = user_data.get('in_free_mode_conversation')
    if in_free_mode and text.lower() in exit_commands:
        user_data.pop('in_free_mode_conversation', None)
        user_data.pop('free_mode_history', None) # –ò–ó–ú–ï–ù–ï–ù–û: –û—á–∏—â–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ
        logger.info(f"Chat {chat_id} exited free mode conversation by command.")
        await log_user_action(chat_id, "free_mode_exit_cmd")
        await update.message.reply_text("–í—ã –≤—ã—à–ª–∏ –∏–∑ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞.", reply_markup=back_button())
        return

    # 2. –†–µ–∂–∏–º –º—É–ª—å—Ç–∏-–≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ –∏–¥–∏–æ–º–µ
    elif current_asking_idiom:
        question = text; await log_user_action(chat_id, "asking_mode_question", {"idiom": current_asking_idiom, "question": question})
        if not client or not MODEL: await update.message.reply_text("‚ùå –°–µ—Ä–≤–∏—Å –æ—Ç–≤–µ—Ç–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.", reply_markup=exit_asking_button()); return

        # --- –õ–æ–≥–∏–∫–∞ –¥–ª—è —Ä–µ–∂–∏–º–∞ –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ –∏–¥–∏–æ–º–µ (–±–µ–∑ –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–∫–∞) ---
        prompt = f"–¢—ã –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ø–æ –∫–∏—Ç–∞–π—Å–∫–æ–º—É —è–∑—ã–∫—É. –í–æ–ø—Ä–æ—Å –æ–± –∏–¥–∏–æ–º–µ '{current_asking_idiom}': '{question}'. –ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å —Ä–µ–ª–µ–≤–∞–Ω—Ç–µ–Ω, –æ—Ç–≤–µ—Ç—å –ö–†–ê–¢–ö–û –∏ –ø–æ —Å—É—â–µ—Å—Ç–≤—É –Ω–∞ —Ä—É—Å—Å–∫–æ–º. –ï—Å–ª–∏ –Ω–µ—Ç, —Å–∫–∞–∂–∏ '–≠—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å –Ω–µ –æ–± –∏–¥–∏–æ–º–µ {current_asking_idiom}. –°–ø—Ä–æ—Å–∏—Ç–µ –æ –Ω–µ–π –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –°–≤–æ–±–æ–¥–Ω—ã–π —Ä–µ–∂–∏–º.'"
        try:
            await context.bot.send_chat_action(chat_id=chat_id, action="typing")
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–Ω—É—é –º–æ–¥–µ–ª—å MODEL
            response = client.models.generate_content(model=MODEL, contents=[prompt])
            await update.message.reply_text(response.text, reply_markup=exit_asking_button())
        except Exception as e: logger.error(f"–û—à–∏–±–∫–∞ Gemini (asking_mode): {e}", exc_info=True); await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}", reply_markup=exit_asking_button())
        # --- –ö–æ–Ω–µ—Ü –ª–æ–≥–∏–∫–∏ –¥–ª—è —Ä–µ–∂–∏–º–∞ –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ –∏–¥–∏–æ–º–µ ---


    # 3. –†–µ–∂–∏–º —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞ - –ù–û–í–´–ô –ë–õ–û–ö —Å –ò–°–¢–û–†–ò–ï–ô
    elif in_free_mode:
        user_message = text
        await log_user_action(chat_id, "free_mode_question", {"question": user_message})
        if not client or not MODEL:
            await update.message.reply_text("‚ùå –°–µ—Ä–≤–∏—Å –æ—Ç–≤–µ—Ç–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.", reply_markup=exit_free_mode_button())
            return

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –∏—Å—Ç–æ—Ä–∏—é –∏–ª–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—É—Å—Ç—É—é
        history = context.user_data.get('free_mode_history', [])

        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∏—Å—Ç–æ—Ä–∏—é
        # –§–æ—Ä–º–∞—Ç: —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å –∫–ª—é—á–∞–º–∏ 'role' –∏ 'parts'
        history.append({'role': 'user', 'parts': [{'text': user_message}]})

        try:
            await context.bot.send_chat_action(chat_id=chat_id, action="typing")

            # --- –í—ã–∑–æ–≤ Gemini API —Å –ø–µ—Ä–µ–¥–∞—á–µ–π –≤—Å–µ–π –∏—Å—Ç–æ—Ä–∏–∏ ---
            # 'contents' –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–ø–∏—Å–∫–æ–º —Å–ª–æ–≤–∞—Ä–µ–π, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—â–∏—Ö –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–Ω—É—é –º–æ–¥–µ–ª—å MODEL
            response = client.models.generate_content(model=MODEL, contents=history)
            reply_text = response.text
            # --- –ö–æ–Ω–µ—Ü –≤—ã–∑–æ–≤–∞ Gemini API ---

            # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –º–æ–¥–µ–ª–∏ –≤ –∏—Å—Ç–æ—Ä–∏—é
            history.append({'role': 'model', 'parts': [{'text': reply_text}]})

            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∏—Å—Ç–æ—Ä–∏–∏, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–æ—Å–ª–µ–¥–Ω–∏–µ N —Å–æ–æ–±—â–µ–Ω–∏–π)
            # MAX_HISTORY_LEN = 10 # –ü—Ä–∏–º–µ—Ä
            # if len(history) > MAX_HISTORY_LEN:
            #     history = history[-MAX_HISTORY_LEN:] # –û—Å—Ç–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ N

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é –æ–±—Ä–∞—Ç–Ω–æ –≤ user_data
            context.user_data['free_mode_history'] = history

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏ –∫–Ω–æ–ø–∫—É –≤—ã—Ö–æ–¥–∞
            await update.message.reply_text(reply_text, reply_markup=exit_free_mode_button())

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ Gemini (free_mode_conversation): {e}", exc_info=True)
            # –í–∞–∂–Ω–æ: –Ω–µ –¥–æ–±–∞–≤–ª—è–µ–º –æ—à–∏–±–æ—á–Ω—ã–π –æ—Ç–≤–µ—Ç –≤ –∏—Å—Ç–æ—Ä–∏—é
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞: {str(e)}", reply_markup=exit_free_mode_button())
        # --- –ö–æ–Ω–µ—Ü –ù–û–í–û–ì–û –ë–õ–û–ö–ê ---

    # 4. –û–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞ –∏–¥–∏–æ–º—ã –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
    elif user_data.get("awaiting_idiom"):
        user_data.pop("awaiting_idiom", None); await log_user_action(chat_id, "add_idiom_input", {"text": text})
        await confirm_add_idiom(update.message, context, text)

    # 5. –û–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
    elif user_data.get("awaiting_time"):
        user_data.pop("awaiting_time", None); await log_user_action(chat_id, "set_time_input", {"text": text})
        try:
            valid_time = datetime.strptime(text, "%H:%M").strftime("%H:%M")
            if cursor and conn: cursor.execute("UPDATE users SET daily_time = ? WHERE chat_id = ?", (valid_time, chat_id)); conn.commit()
            else: raise sqlite3.Error("DB not available")
            await update.message.reply_text(f"‚úÖ –í—Ä–µ–º—è —Ä–∞—Å—Å—ã–ª–∫–∏: {valid_time} UTC", reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings")]]))
        except ValueError: await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! (–ß–ß:–ú–ú)", reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings")]]))
        except sqlite3.Error as e: logger.error(f"–û—à–∏–±–∫–∞ SQLite –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏ {chat_id}: {e}"); await update.message.reply_text("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è.", reply_markup=back_button())

    # 6. –û–∂–∏–¥–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –∑–∞–¥–∞–Ω–∏–µ –≤ —Ä–µ–∂–∏–º–µ –ø—Ä–∞–∫—Ç–∏–∫–∏ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –ª–æ–≥–∏–∫–µ, –Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –Ω–æ–≤—É—é –º–æ–¥–µ–ª—å)
    elif user_data.get("practice_type"):
        practice_type = user_data.pop("practice_type", None); idiom_data = user_data.pop("current_practice_idiom_data", None)
        if not idiom_data or not practice_type: logger.warning(f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∞–∫—Ç–∏–∫–∏ {chat_id}"); await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∞–∫—Ç–∏–∫–∏.", reply_markup=back_button()); return
        await log_user_action(chat_id, f"practice_answer_{practice_type}", {"idiom": idiom_data.get('idiom'), "answer": text})
        if not client or not MODEL: await update.message.reply_text("‚ùå –°–µ—Ä–≤–∏—Å –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.", reply_markup=back_button()); return
        task_desc = "–ø–µ—Ä–µ–≤–æ–¥" if practice_type == "translate" else "—Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–º–µ—Ä–∞"
        prompt = (f"–ü—Ä–æ–≤–µ—Ä—å –∑–∞–¥–∞–Ω–∏–µ –ø–æ –∏–¥–∏–æ–º–µ: {idiom_data.get('idiom')} ({idiom_data.get('pinyin')}). –ü–µ—Ä–µ–≤–æ–¥: {idiom_data.get('translation')}. –ó–∞–¥–∞–Ω–∏–µ: {task_desc}. –û—Ç–≤–µ—Ç: '{text}'.\n"
                  f"–û—Ü–µ–Ω–∏ –ö–†–ê–¢–ö–û. –ï—Å–ª–∏ –≤–µ—Ä–Ω–æ, –Ω–∞—á–Ω–∏ —Å '‚úÖ –í–µ—Ä–Ω–æ!'. –ï—Å–ª–∏ –Ω–µ—Ç, —Å '‚ùå –ù–µ —Å–æ–≤—Å–µ–º –≤–µ—Ä–Ω–æ.', –¥–∞–π –ø–æ—è—Å–Ω–µ–Ω–∏–µ.\n"
                  f"–í –ö–û–ù–¶–ï –¥–æ–±–∞–≤—å –¢–û–õ–¨–ö–û '[correct]' –∏–ª–∏ '[incorrect]'.")
        try:
            await context.bot.send_chat_action(chat_id=chat_id, action="typing")
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–Ω—É—é –º–æ–¥–µ–ª—å MODEL
            response = client.models.generate_content(model=MODEL, contents=[prompt]); reply_text_raw = response.text
            is_correct = False; reply_text_clean = reply_text_raw
            if reply_text_raw.rstrip().endswith("[correct]"): is_correct = True; reply_text_clean = reply_text_raw.rsplit("[correct]", 1)[0].strip()
            elif reply_text_raw.rstrip().endswith("[incorrect]"): is_correct = False; reply_text_clean = reply_text_raw.rsplit("[incorrect]", 1)[0].strip()
            else: logger.warning(f"–ù–µ—Ç –º–∞—Ä–∫–µ—Ä–∞ Gemini –≤ –ø—Ä–∞–∫—Ç–∏–∫–µ {chat_id}: '{reply_text_raw}'"); reply_text_clean += "\n_(–¢–æ—á–Ω–æ—Å—Ç—å –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞)_"; is_correct = False # –î–µ—Ñ–æ–ª—Ç - –Ω–µ–≤–µ—Ä–Ω–æ
            if cursor and conn:
                try: cursor.execute("UPDATE users SET practice_total = practice_total + 1, practice_correct = practice_correct + ? WHERE chat_id = ?", (1 if is_correct else 0, chat_id)); conn.commit(); await log_user_action(chat_id, "practice_result", {"idiom": idiom_data.get('idiom'), "correct": is_correct})
                except sqlite3.Error as e: logger.error(f"–û—à–∏–±–∫–∞ SQLite –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ {chat_id}: {e}")
            await update.message.reply_text(reply_text_clean or "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ü–µ–Ω–∫—É.", reply_markup=back_button())
        except Exception as e: logger.error(f"–û—à–∏–±–∫–∞ Gemini (–ø—Ä–∞–∫—Ç–∏–∫–∞): {e}", exc_info=True); await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: {str(e)}", reply_markup=back_button())

    # 7. –ï—Å–ª–∏ –Ω–µ –æ–∂–∏–¥–∞–µ—Ç—Å—è –Ω–∏–∫–∞–∫–æ–≥–æ —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
    else:
        await log_user_action(chat_id, "unhandled_message", {"text": text})
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –∏–ª–∏ –∫–æ–º–∞–Ω–¥—É /start.")

# 16. –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –∫–Ω–æ–ø–æ–∫ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
def format_idiom_details(idiom_data: sqlite3.Row) -> str:
    if not idiom_data: return "–ò–¥–∏–æ–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞."
    try: return (f"üî§ *–ò–¥–∏–æ–º–∞*: {idiom_data['idiom']}\nüà∑Ô∏è *–ü–∏–Ω—å–∏–Ω—å*: {idiom_data['pinyin']}\nüåê *–ü–µ—Ä–µ–≤–æ–¥*: {idiom_data['translation']}\nüí° *–ó–Ω–∞—á–µ–Ω–∏–µ*: {idiom_data['meaning']}\nüìù *–ü—Ä–∏–º–µ—Ä*: {idiom_data['example']}")
    except (IndexError, KeyError) as e: logger.error(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–¥–∏–æ–º—ã: {e} - Data: {dict(idiom_data) if idiom_data else 'None'}"); return "–û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö."

def back_button(): return InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back")]])
def back_to_dictionary_button(): return InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ —Å–ª–æ–≤–∞—Ä—å", callback_data="back_to_dictionary")]])
def exit_asking_button(): return InlineKeyboardMarkup([[InlineKeyboardButton("üö™ –í—ã–π—Ç–∏ –∏–∑ —Ä–µ–∂–∏–º–∞ –≤–æ–ø—Ä–æ—Å–æ–≤", callback_data="exit_asking_mode")]])
def exit_free_mode_button(): return InlineKeyboardMarkup([[InlineKeyboardButton("üö™ –í—ã–π—Ç–∏ –∏–∑ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞", callback_data="exit_free_mode")]])

# 17. –§—É–Ω–∫—Ü–∏—è –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏ (`send_daily_idiom`) - –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –ª–æ–≥–∏–∫–µ
async def send_daily_idiom(context: ContextTypes.DEFAULT_TYPE):
    if not cursor: return
    now_utc = datetime.now(pytz.utc); current_time_str = now_utc.strftime("%H:%M")
    if now_utc.minute == 0: logger.debug(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ {current_time_str} UTC") # –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Ä–∞–∑ –≤ —á–∞—Å –¥–ª—è —á–∏—Å—Ç–æ—Ç—ã
    users_to_notify = []
    try: cursor.execute("SELECT chat_id FROM users WHERE daily_time = ?", (current_time_str,)); users_to_notify = [row['chat_id'] for row in cursor.fetchall()]
    except sqlite3.Error as e: logger.error(f"–û—à–∏–±–∫–∞ SQLite –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Ä–∞—Å—Å—ã–ª–∫–∏: {e}"); return
    if not users_to_notify: return
    try: cursor.execute("SELECT * FROM idioms ORDER BY RANDOM() LIMIT 1"); idiom_data = cursor.fetchone()
    except sqlite3.Error as e: logger.error(f"–û—à–∏–±–∫–∞ SQLite –ø–æ–ª—É—á–µ–Ω–∏—è –∏–¥–∏–æ–º—ã –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏: {e}"); return
    if not idiom_data: logger.warning("–ë–î –∏–¥–∏–æ–º –ø—É—Å—Ç–∞ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏."); return
    idiom_text = idiom_data['idiom']
    msg_text = f"üìö *–ò–¥–∏–æ–º–∞ –¥–Ω—è* ({now_utc.strftime('%d.%m.%Y')})\n\n" + format_idiom_details(idiom_data)
    keyboard = [[InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤ —Å–ª–æ–≤–∞—Ä—å", callback_data=f"confirm_add_{idiom_text}")], [InlineKeyboardButton("‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å", callback_data=f"question_{idiom_text}")]]
    sent_count, failed_count = 0, 0
    for chat_id in users_to_notify:
        try: await context.bot.send_message(chat_id=chat_id, text=msg_text, parse_mode="Markdown", reply_markup=InlineKeyboardMarkup(keyboard)); sent_count += 1; await log_user_action(chat_id, "daily_idiom_sent", {"idiom": idiom_text})
        except Exception as e: failed_count += 1; logger.warning(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–∞—Å—Å—ã–ª–∫–∏ {chat_id}: {e}")
    if sent_count > 0 or failed_count > 0: logger.info(f"–†–∞—Å—Å—ã–ª–∫–∞ –≤ {current_time_str} UTC: –æ—Ç–ø—Ä={sent_count}, –æ—à–∏–±–∫–∏={failed_count}.")

# 18. –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ª–æ–≥–æ–≤ (`show_logs`) (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
async def show_logs(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message or not update.effective_chat: return
    chat_id = update.effective_chat.id
    user = update.effective_user
    if user: await update_user_info(chat_id, user)
    await log_user_action(chat_id, "command_log")

    if not cursor: await update.message.reply_text("–û—à–∏–±–∫–∞: –ë–î –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞."); return

    log_limit = 15
    try:
        query = """
            SELECT ul.timestamp, ul.action_type, ul.details, u.username, u.first_name
            FROM user_logs ul
            LEFT JOIN users u ON ul.chat_id = u.chat_id
            WHERE ul.chat_id = ?
            ORDER BY ul.timestamp DESC
            LIMIT ?
        """
        cursor.execute(query, (chat_id, log_limit))
        logs = cursor.fetchall()

        if not logs: await update.message.reply_text("–ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –≤ –ª–æ–≥–µ –¥–ª—è –≤–∞—Å."); return

        log_message = f"üìã *–ü–æ—Å–ª–µ–¥–Ω–∏–µ {len(logs)} –≤–∞—à–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π* (–Ω–æ–≤–µ–π—à–∏–µ —Å–≤–µ—Ä—Ö—É):\n\n"
        for log_row in logs:
            ts_str = log_row['timestamp']; action = log_row['action_type']; details_json = log_row['details']
            username = log_row['username']; first_name = log_row['first_name']
            try: formatted_ts = datetime.fromisoformat(ts_str.split('.')[0]).strftime('%Y-%m-%d %H:%M UTC') # –£–±—Ä–∞–ª —Å–µ–∫—É–Ω–¥—ã –¥–ª—è –∫—Ä–∞—Ç–∫–æ—Å—Ç–∏
            except: formatted_ts = ts_str
            details_str = ""
            if details_json:
                try: details_dict = json.loads(details_json); details_str = " | " + ", ".join(f"`{k}`=`{v}`" for k, v in details_dict.items()) # –ò–∑–º–µ–Ω–∏–ª —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –∫—Ä–∞—Ç–∫–æ—Å—Ç–∏
                except: details_str = f" | {details_json}"
            log_message += f"`{formatted_ts}`: **{action}**{details_str}\n"

        await update.message.reply_text(log_message, parse_mode="Markdown")
        logger.info(f"–õ–æ–≥ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id}.")

    except sqlite3.Error as e: logger.error(f"–û—à–∏–±–∫–∞ SQLite –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –ª–æ–≥–æ–≤ {chat_id}: {e}", exc_info=True); await update.message.reply_text("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–≥–æ–≤.")
    except Exception as e: logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ show_logs {chat_id}: {e}", exc_info=True); await update.message.reply_text("–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –ª–æ–≥–∞.")


# 19. –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ (`main`) (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
def main():
    # –ò–ó–ú–ï–ù–ï–ù–û: –ü—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–æ–≤ —Ç–µ–ø–µ—Ä—å –≤–Ω—É—Ç—Ä–∏ tokens.py –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ, –Ω–æ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∏ –∑–¥–µ—Å—å
    if not TELEGRAM_TOKEN or "YOUR_REAL_TELEGRAM_BOT_TOKEN" in TELEGRAM_TOKEN: logger.critical("!!! –ù–ï–¢ TELEGRAM_TOKEN –≤ tokens.py !!!"); return
    if not GEMINI_API_KEY or "YOUR_REAL_GEMINI_API_KEY" in GEMINI_API_KEY: logger.warning("!!! –ù–ï–¢ GEMINI_API_KEY –≤ tokens.py !!!")
    if not client: logger.warning("!!! Gemini API –∫–ª–∏–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω (–ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–ª—é—á –∏–ª–∏ API). –§—É–Ω–∫—Ü–∏–∏ Gemini –Ω–µ –±—É–¥—É—Ç —Ä–∞–±–æ—Ç–∞—Ç—å. !!!")
    if not conn or not cursor: logger.critical("!!! –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î !!!"); return

    logger.info(f"–ó–∞–≥—Ä—É–∑–∫–∞/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–¥–∏–æ–º –∏–∑ {IDIOMS_JSON_FILE}...")
    load_idioms_from_json(cursor, conn)
    logger.info("–ó–∞–≥—Ä—É–∑–∫–∞ –∏–¥–∏–æ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")

    try:
        app = Application.builder().token(TELEGRAM_TOKEN).build()
        logger.info("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Telegram –±–æ—Ç–∞ —Å–æ–∑–¥–∞–Ω–æ.")
        app.add_handler(CommandHandler("start", show_main_menu))
        app.add_handler(CommandHandler("log", show_logs)) # –î–æ–±–∞–≤–∏–ª–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ /log
        app.add_handler(CallbackQueryHandler(button_handler))
        app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
        logger.info("–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã.")
        if app.job_queue: app.job_queue.run_repeating(send_daily_idiom, interval=60, first=10); logger.info("–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞.")
        else: logger.warning("Job Queue –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")
        logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ (polling)...")
        app.run_polling()
    except Exception as e: logger.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {str(e)}", exc_info=True)
    finally:
          if conn: conn.close(); logger.info("–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î –∑–∞–∫—Ä—ã—Ç–æ.")

# 20. –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
if __name__ == "__main__":
    main()
